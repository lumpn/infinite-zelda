init:
L=0

terminal:
L=1


minimal:
1. L=0 -> L=1

2. L=1 (0,1) qed


linear:
1. L=0 -> L=2
2. L=2 -> L=0
3. L=2 -> L=3
4. L=3 -> L=2
5. L=3 -> L=1
6. L=1 -> L=3

7. L=0 -> L=3 (1,3)
8. L=0 -> L=1 (7,5)
9. L=1 (0,8) qed


cyclic:
1. L=0 -> L=2
2. L=2 -> L=0
3. L=2 -> L=3
4. L=3 -> L=2
5. L=3 -> L=0
6. L=0 -> L=3
7. L=2 -> L=1
8. L=1 -> L=2

9. L=0 -> L=1 (1,7)
10. L=1 (0,9)


deadend:
1. L=0 -> L=2
2. L=2 -> L=0
3. L=2 -> L=1
4. L=1 -> L=2
5. L=0 -> L=3

6. L=0 -> L=1 (1,3)

reachability:
a. L=1 (0,6)
b. L=2 (0,1)
c. L=3 (0,5)

termination:
a. L=1 (terminal)
b. L=1 (b,3)
c. error


key-door-simple:
// 0 key
// 0 <-> 1 door

1. L=0 & KS1=0 & K=0 -> KS1=1, K=1
2. L=0 & DS1=1 -> L=1
3. L=1 & DS1=1 -> L=0
4. L=0 & DS1=0 & K=1 -> L=1, DS1=1, K=0
5. L=1 & DS1=0 & K=1 -> L=0, DS1=1, K=0

// full expansion
1. L=0 & KS1=0 & K=0 & DS1=A -> L=0 & KS1=1 & K=1 & DS1=A
2. L=0 & KS1=A & K=B & DS1=1 -> L=1 & KS1=A & K=B & DS1=1
3. L=1 & KS1=A & K=B & DS1=1 -> L=0 & KS1=A & K=B & DS1=1
4. L=0 & KS1=A & K=1 & DS1=0 -> L=1 & KS1=A & K=0 & DS1=1
5. L=1 & KS1=A & K=1 & DS1=0 -> L=0 & KS1=A & K=0 & DS1=1

6. L=0 & KS1=0 & K=0 & DS1=1A -> L=0 & KS1=1 & K=1 & DS1=1A == L=0 & KS1=2A & K=1 & DS1=0 -> L=1 & KS1=2A & K=0 & DS1=1
6. L=0 & KS1=0 & K=0 & DS1=1A ->       KS1=1 & K=1 & DS1=1A ==       KS1=2A & K=1 & DS1=0 -> L=1 & KS1=2A & K=0 & DS1=1
6. L=0 & KS1=0 & K=0 & DS1=1A ->       KS1=1       & DS1=1A ==       KS1=2A       & DS1=0 -> L=1 & KS1=2A & K=0 & DS1=1
6. L=0 & KS1=0 & K=0 & DS1=0  ->       KS1=1       & DS1=0  ==       KS1=2A       & DS1=0 -> L=1 & KS1=2A & K=0 & DS1=1 (1A=0)
6. L=0 & KS1=0 & K=0 & DS1=0  ->       KS1=1                ==       KS1=2A               -> L=1 & KS1=2A & K=0 & DS1=1
6. L=0 & KS1=0 & K=0 & DS1=0  ->       KS1=1                ==       KS1=1                -> L=1 & KS1=1  & K=0 & DS1=1 (2A=1)
6. L=0 & KS1=0 & K=0 & DS1=0  ->                            ==                            -> L=1 & KS1=1  & K=0 & DS1=1
6. L=0 & KS1=0 & K=0 & DS1=0  ->                                                             L=1 & KS1=1  & K=0 & DS1=1 (1, 4, 1A=0, 2A=1)

// without expansion
6. L=0 & KS1=0 & K=0         -> KS1=1 & K=1 == L=0 & DS1=0 & K=1 -> L=1         & K=0 & DS1=1 (eliminate K=1)
6. L=0 & KS1=0 & K=0         -> KS1=1       == L=0 & DS1=0       -> L=1         & K=0 & DS1=1 (eliminate L=0)
6. L=0 & KS1=0 & K=0         -> KS1=1       ==       DS1=0       -> L=1         & K=0 & DS1=1 (assert DS1=0)
6. L=0 & KS1=0 & K=0 & DS1=0 -> KS1=1       ==                   -> L=1         & K=0 & DS1=1 (imply KS1=1)
6. L=0 & KS1=0 & K=0 & DS1=0 ->             ==                   -> L=1 & KS1=1 & K=0 & DS1=1
6. L=0 & KS1=0 & K=0 & DS1=0 ->                                     L=1 & KS1=1 & K=0 & DS1=1


key-door-linear:
0 <-> 2 door
2 <-> 3 door
3 <-> 1 door
0 key
2 key
3 key


1. L=0 & KS1=0 & K=0 -> KS1=1, K=1
2. L=2 & KS2=0 & K=0 -> KS2=1, K=1
3. L=3 & KS3=0 & K=0 -> KS3=1, K=1
4. L=0 & DS1=1 -> L=2
6. L=2 & DS1=1 -> L=0
5. L=0 & DS1=0 & K=1 -> L=2, DS1=1, K=0
7. L=2 & DS1=0 & K=1 -> L=0, DS1=1, K=0




start -> L=0
L=1   -> end

proof (sound):    start -> end
proof (complete): Vx: (start -> x) -> (x -> end)



1. start -> L=0
2. L=1 -> end
3. L=0 -> L=1
4. L=0 -> L=2


5. start -> L=0 == L=0 -> L=1 (1,3)
5. start ->            -> L=1
6. start -> L=1 == L=1 -> end (5,3)
6. start ->            -> end
success

7. start -> L=0 == L=0 -> L=2 (1,4)
7. start ->            -> L=2
failure


DFS rule expansion!


